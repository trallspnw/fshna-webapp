/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    admins: AdminAuthOperations;
  };
  blocks: {
    eventCardGrid: EventCardGrid;
    heading: Heading;
    hero: Hero;
    paragraph: Paragraph;
    media: MediaBlock;
    membershipStatusForm: MembershipStatusForm;
    subscriptionForm: SubscriptionForm;
    donationForm: DonationForm;
    membershipDuesForm: MembershipDuesForm;
    orderSummary: OrderSummary;
    twoColumns: TwoColumns;
    accordion: Accordion;
  };
  collections: {
    admins: Admin;
    events: Event;
    media: Media;
    mediaFiles: MediaFile;
    pages: Page;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    admins: AdminsSelect<false> | AdminsSelect<true>;
    events: EventsSelect<false> | EventsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    mediaFiles: MediaFilesSelect<false> | MediaFilesSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    footer: Footer;
    general: General;
  };
  globalsSelect: {
    footer: FooterSelect<false> | FooterSelect<true>;
    general: GeneralSelect<false> | GeneralSelect<true>;
  };
  locale: null;
  user: Admin & {
    collection: 'admins';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface AdminAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "EventCardGrid".
 */
export interface EventCardGrid {
  heading?: {
    en?: string | null;
    es?: string | null;
  };
  rowsToShow: number;
  filter: 'upcoming' | 'past';
  /**
   * Enables a "Show more" button
   */
  showMoreLabel?: {
    en?: string | null;
    es?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'eventCardGrid';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Heading".
 */
export interface Heading {
  text: {
    en: string;
    es?: string | null;
  };
  /**
   * Choose the heading level (smaller is bigger)
   */
  level: '1' | '2' | '3' | '4' | '5' | '6';
  id?: string | null;
  blockName?: string | null;
  blockType: 'heading';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "hero".
 */
export interface Hero {
  heading: {
    en: string;
    es?: string | null;
  };
  subheading?: {
    en?: string | null;
    es?: string | null;
  };
  backgroundMedia: number | Media;
  /**
   * Actions rendered in reverse order (first item displays on right or bottom)
   */
  actions?: Action[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'hero';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  /**
   * Internal name of media
   */
  title: string;
  media?: {
    en?: (number | null) | MediaFile;
    es?: (number | null) | MediaFile;
  };
  altText?: {
    en?: string | null;
    es?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaFiles".
 */
export interface MediaFile {
  id: number;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Action".
 */
export interface Action {
  label: {
    en: string;
    es?: string | null;
  };
  style: 'primary' | 'secondary' | 'subtle' | 'link';
  actionType: 'navigate' | 'custom';
  /**
   * /example or https://example.com
   */
  url?: string | null;
  customActionKey?: ('showMoreEvents' | 'checkMembershipStatus') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'action';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Paragraph".
 */
export interface Paragraph {
  text: {
    en: string;
    es?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'paragraph';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  media: number | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'media';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MembershipStatusForm".
 */
export interface MembershipStatusForm {
  submitButtonText: {
    en: string;
    es?: string | null;
  };
  successHeading: {
    en: string;
    es?: string | null;
  };
  successMessage: {
    en: string;
    es?: string | null;
  };
  failureHeading: {
    en: string;
    es?: string | null;
  };
  failureMessage: {
    en: string;
    es?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'membershipStatusForm';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SubscriptionForm".
 */
export interface SubscriptionForm {
  submitButtonText: {
    en: string;
    es?: string | null;
  };
  successHeading: {
    en: string;
    es?: string | null;
  };
  successMessage: {
    en: string;
    es?: string | null;
  };
  failureHeading: {
    en: string;
    es?: string | null;
  };
  failureMessage: {
    en: string;
    es?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'subscriptionForm';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DonationForm".
 */
export interface DonationForm {
  submitButtonText: {
    en: string;
    es?: string | null;
  };
  amountLabel?: {
    en?: string | null;
    es?: string | null;
  };
  amountPlaceholder?: {
    en?: string | null;
    es?: string | null;
  };
  amountValidationError?: {
    en?: string | null;
    es?: string | null;
  };
  itemName?: {
    en?: string | null;
    es?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'donationForm';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MembershipDuesForm".
 */
export interface MembershipDuesForm {
  submitButtonText: {
    en: string;
    es?: string | null;
  };
  priceLabel: {
    en: string;
    es?: string | null;
  };
  itemName?: {
    en?: string | null;
    es?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'membershipDuesForm';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "OrderSummary".
 */
export interface OrderSummary {
  heading: {
    en: string;
    es?: string | null;
  };
  paidStatus: {
    en: string;
    es?: string | null;
  };
  unpaidStatus: {
    en: string;
    es?: string | null;
  };
  totalPaidLabel: {
    en: string;
    es?: string | null;
  };
  loadingText: {
    en: string;
    es?: string | null;
  };
  orderNotFoundText: {
    en: string;
    es?: string | null;
  };
  returnButtonText: {
    en: string;
    es?: string | null;
  };
  retryButtonText?: {
    en?: string | null;
    es?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'orderSummary';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "twoColumns".
 */
export interface TwoColumns {
  columnRatio?: ('70-30' | '60-40' | '50-50' | '40-60' | '30-70') | null;
  leftColumn?:
    | (
        | EventCardGrid
        | Heading
        | {
            heading: {
              en: string;
              es?: string | null;
            };
            subheading?: {
              en?: string | null;
              es?: string | null;
            };
            backgroundMedia: number | Media;
            /**
             * Actions rendered in reverse order (first item displays on right or bottom)
             */
            actions?: Action[] | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'hero';
          }
        | Action
        | Paragraph
        | MediaBlock
        | MembershipStatusForm
        | SubscriptionForm
        | DonationForm
        | MembershipDuesForm
        | OrderSummary
        | Align
      )[]
    | null;
  rightColumn?:
    | (
        | EventCardGrid
        | Heading
        | {
            heading: {
              en: string;
              es?: string | null;
            };
            subheading?: {
              en?: string | null;
              es?: string | null;
            };
            backgroundMedia: number | Media;
            /**
             * Actions rendered in reverse order (first item displays on right or bottom)
             */
            actions?: Action[] | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'hero';
          }
        | Action
        | Paragraph
        | MediaBlock
        | MembershipStatusForm
        | SubscriptionForm
        | DonationForm
        | MembershipDuesForm
        | OrderSummary
        | Align
      )[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'twoColumns';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Align".
 */
export interface Align {
  align: 'left' | 'center' | 'right';
  blocks?:
    | (
        | EventCardGrid
        | Heading
        | {
            heading: {
              en: string;
              es?: string | null;
            };
            subheading?: {
              en?: string | null;
              es?: string | null;
            };
            backgroundMedia: number | Media;
            /**
             * Actions rendered in reverse order (first item displays on right or bottom)
             */
            actions?: Action[] | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'hero';
          }
        | Action
        | Paragraph
        | MediaBlock
        | MembershipStatusForm
        | SubscriptionForm
        | DonationForm
        | MembershipDuesForm
        | OrderSummary
      )[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'align';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Accordion".
 */
export interface Accordion {
  items: {
    title: {
      en: string;
      es?: string | null;
    };
    content?:
      | (
          | EventCardGrid
          | Heading
          | {
              heading: {
                en: string;
                es?: string | null;
              };
              subheading?: {
                en?: string | null;
                es?: string | null;
              };
              backgroundMedia: number | Media;
              /**
               * Actions rendered in reverse order (first item displays on right or bottom)
               */
              actions?: Action[] | null;
              id?: string | null;
              blockName?: string | null;
              blockType: 'hero';
            }
          | Action
          | Paragraph
          | MediaBlock
          | MembershipStatusForm
          | SubscriptionForm
          | DonationForm
          | MembershipDuesForm
          | OrderSummary
        )[]
      | null;
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'accordion';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "admins".
 */
export interface Admin {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events".
 */
export interface Event {
  id: number;
  /**
   * Part of the URL which routes to this event
   */
  slug: string;
  titleText?: string | null;
  title: {
    en: string;
    es?: string | null;
  };
  location: {
    en: string;
    es?: string | null;
  };
  dateTime: string;
  media: number | Media;
  blocks?:
    | (
        | EventCardGrid
        | Heading
        | {
            heading: {
              en: string;
              es?: string | null;
            };
            subheading?: {
              en?: string | null;
              es?: string | null;
            };
            backgroundMedia: number | Media;
            /**
             * Actions rendered in reverse order (first item displays on right or bottom)
             */
            actions?: Action[] | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'hero';
          }
        | Action
        | Paragraph
        | MediaBlock
        | MembershipStatusForm
        | SubscriptionForm
        | DonationForm
        | MembershipDuesForm
        | OrderSummary
        | {
            columnRatio?: ('70-30' | '60-40' | '50-50' | '40-60' | '30-70') | null;
            leftColumn?:
              | (
                  | EventCardGrid
                  | Heading
                  | {
                      heading: {
                        en: string;
                        es?: string | null;
                      };
                      subheading?: {
                        en?: string | null;
                        es?: string | null;
                      };
                      backgroundMedia: number | Media;
                      /**
                       * Actions rendered in reverse order (first item displays on right or bottom)
                       */
                      actions?: Action[] | null;
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'hero';
                    }
                  | Action
                  | Paragraph
                  | MediaBlock
                  | MembershipStatusForm
                  | SubscriptionForm
                  | DonationForm
                  | MembershipDuesForm
                  | OrderSummary
                  | Align
                )[]
              | null;
            rightColumn?:
              | (
                  | EventCardGrid
                  | Heading
                  | {
                      heading: {
                        en: string;
                        es?: string | null;
                      };
                      subheading?: {
                        en?: string | null;
                        es?: string | null;
                      };
                      backgroundMedia: number | Media;
                      /**
                       * Actions rendered in reverse order (first item displays on right or bottom)
                       */
                      actions?: Action[] | null;
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'hero';
                    }
                  | Action
                  | Paragraph
                  | MediaBlock
                  | MembershipStatusForm
                  | SubscriptionForm
                  | DonationForm
                  | MembershipDuesForm
                  | OrderSummary
                  | Align
                )[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'twoColumns';
          }
        | Align
        | Accordion
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  /**
   * Part of the URL which routes to this page
   */
  slug: string;
  titleText?: string | null;
  title: {
    en: string;
    es?: string | null;
  };
  showInNav?: boolean | null;
  /**
   * Pages with lower values will be listed first
   */
  navigationOptions?: {
    navOrder?: number | null;
    navLabel: {
      en: string;
      es?: string | null;
    };
  };
  blocks?:
    | (
        | EventCardGrid
        | Heading
        | {
            heading: {
              en: string;
              es?: string | null;
            };
            subheading?: {
              en?: string | null;
              es?: string | null;
            };
            backgroundMedia: number | Media;
            /**
             * Actions rendered in reverse order (first item displays on right or bottom)
             */
            actions?: Action[] | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'hero';
          }
        | Action
        | Paragraph
        | MediaBlock
        | MembershipStatusForm
        | SubscriptionForm
        | DonationForm
        | MembershipDuesForm
        | OrderSummary
        | {
            columnRatio?: ('70-30' | '60-40' | '50-50' | '40-60' | '30-70') | null;
            leftColumn?:
              | (
                  | EventCardGrid
                  | Heading
                  | {
                      heading: {
                        en: string;
                        es?: string | null;
                      };
                      subheading?: {
                        en?: string | null;
                        es?: string | null;
                      };
                      backgroundMedia: number | Media;
                      /**
                       * Actions rendered in reverse order (first item displays on right or bottom)
                       */
                      actions?: Action[] | null;
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'hero';
                    }
                  | Action
                  | Paragraph
                  | MediaBlock
                  | MembershipStatusForm
                  | SubscriptionForm
                  | DonationForm
                  | MembershipDuesForm
                  | OrderSummary
                  | Align
                )[]
              | null;
            rightColumn?:
              | (
                  | EventCardGrid
                  | Heading
                  | {
                      heading: {
                        en: string;
                        es?: string | null;
                      };
                      subheading?: {
                        en?: string | null;
                        es?: string | null;
                      };
                      backgroundMedia: number | Media;
                      /**
                       * Actions rendered in reverse order (first item displays on right or bottom)
                       */
                      actions?: Action[] | null;
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'hero';
                    }
                  | Action
                  | Paragraph
                  | MediaBlock
                  | MembershipStatusForm
                  | SubscriptionForm
                  | DonationForm
                  | MembershipDuesForm
                  | OrderSummary
                  | Align
                )[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'twoColumns';
          }
        | Align
        | Accordion
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'admins';
        value: number | Admin;
      } | null)
    | ({
        relationTo: 'events';
        value: number | Event;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'mediaFiles';
        value: number | MediaFile;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'admins';
    value: number | Admin;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'admins';
    value: number | Admin;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "admins_select".
 */
export interface AdminsSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events_select".
 */
export interface EventsSelect<T extends boolean = true> {
  slug?: T;
  titleText?: T;
  title?:
    | T
    | {
        en?: T;
        es?: T;
      };
  location?:
    | T
    | {
        en?: T;
        es?: T;
      };
  dateTime?: T;
  media?: T;
  blocks?:
    | T
    | {
        eventCardGrid?: T | EventCardGridSelect<T>;
        heading?: T | HeadingSelect<T>;
        hero?:
          | T
          | {
              heading?:
                | T
                | {
                    en?: T;
                    es?: T;
                  };
              subheading?:
                | T
                | {
                    en?: T;
                    es?: T;
                  };
              backgroundMedia?: T;
              actions?:
                | T
                | {
                    action?: T | ActionSelect<T>;
                  };
              id?: T;
              blockName?: T;
            };
        action?: T | ActionSelect<T>;
        paragraph?: T | ParagraphSelect<T>;
        media?: T | MediaBlockSelect<T>;
        membershipStatusForm?: T | MembershipStatusFormSelect<T>;
        subscriptionForm?: T | SubscriptionFormSelect<T>;
        donationForm?: T | DonationFormSelect<T>;
        membershipDuesForm?: T | MembershipDuesFormSelect<T>;
        orderSummary?: T | OrderSummarySelect<T>;
        twoColumns?:
          | T
          | {
              columnRatio?: T;
              leftColumn?:
                | T
                | {
                    eventCardGrid?: T | EventCardGridSelect<T>;
                    heading?: T | HeadingSelect<T>;
                    hero?:
                      | T
                      | {
                          heading?:
                            | T
                            | {
                                en?: T;
                                es?: T;
                              };
                          subheading?:
                            | T
                            | {
                                en?: T;
                                es?: T;
                              };
                          backgroundMedia?: T;
                          actions?:
                            | T
                            | {
                                action?: T | ActionSelect<T>;
                              };
                          id?: T;
                          blockName?: T;
                        };
                    action?: T | ActionSelect<T>;
                    paragraph?: T | ParagraphSelect<T>;
                    media?: T | MediaBlockSelect<T>;
                    membershipStatusForm?: T | MembershipStatusFormSelect<T>;
                    subscriptionForm?: T | SubscriptionFormSelect<T>;
                    donationForm?: T | DonationFormSelect<T>;
                    membershipDuesForm?: T | MembershipDuesFormSelect<T>;
                    orderSummary?: T | OrderSummarySelect<T>;
                    align?: T | AlignSelect<T>;
                  };
              rightColumn?:
                | T
                | {
                    eventCardGrid?: T | EventCardGridSelect<T>;
                    heading?: T | HeadingSelect<T>;
                    hero?:
                      | T
                      | {
                          heading?:
                            | T
                            | {
                                en?: T;
                                es?: T;
                              };
                          subheading?:
                            | T
                            | {
                                en?: T;
                                es?: T;
                              };
                          backgroundMedia?: T;
                          actions?:
                            | T
                            | {
                                action?: T | ActionSelect<T>;
                              };
                          id?: T;
                          blockName?: T;
                        };
                    action?: T | ActionSelect<T>;
                    paragraph?: T | ParagraphSelect<T>;
                    media?: T | MediaBlockSelect<T>;
                    membershipStatusForm?: T | MembershipStatusFormSelect<T>;
                    subscriptionForm?: T | SubscriptionFormSelect<T>;
                    donationForm?: T | DonationFormSelect<T>;
                    membershipDuesForm?: T | MembershipDuesFormSelect<T>;
                    orderSummary?: T | OrderSummarySelect<T>;
                    align?: T | AlignSelect<T>;
                  };
              id?: T;
              blockName?: T;
            };
        align?: T | AlignSelect<T>;
        accordion?: T | AccordionSelect<T>;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "EventCardGrid_select".
 */
export interface EventCardGridSelect<T extends boolean = true> {
  heading?:
    | T
    | {
        en?: T;
        es?: T;
      };
  rowsToShow?: T;
  filter?: T;
  showMoreLabel?:
    | T
    | {
        en?: T;
        es?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Heading_select".
 */
export interface HeadingSelect<T extends boolean = true> {
  text?:
    | T
    | {
        en?: T;
        es?: T;
      };
  level?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Action_select".
 */
export interface ActionSelect<T extends boolean = true> {
  label?:
    | T
    | {
        en?: T;
        es?: T;
      };
  style?: T;
  actionType?: T;
  url?: T;
  customActionKey?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Paragraph_select".
 */
export interface ParagraphSelect<T extends boolean = true> {
  text?:
    | T
    | {
        en?: T;
        es?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  media?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MembershipStatusForm_select".
 */
export interface MembershipStatusFormSelect<T extends boolean = true> {
  submitButtonText?:
    | T
    | {
        en?: T;
        es?: T;
      };
  successHeading?:
    | T
    | {
        en?: T;
        es?: T;
      };
  successMessage?:
    | T
    | {
        en?: T;
        es?: T;
      };
  failureHeading?:
    | T
    | {
        en?: T;
        es?: T;
      };
  failureMessage?:
    | T
    | {
        en?: T;
        es?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SubscriptionForm_select".
 */
export interface SubscriptionFormSelect<T extends boolean = true> {
  submitButtonText?:
    | T
    | {
        en?: T;
        es?: T;
      };
  successHeading?:
    | T
    | {
        en?: T;
        es?: T;
      };
  successMessage?:
    | T
    | {
        en?: T;
        es?: T;
      };
  failureHeading?:
    | T
    | {
        en?: T;
        es?: T;
      };
  failureMessage?:
    | T
    | {
        en?: T;
        es?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DonationForm_select".
 */
export interface DonationFormSelect<T extends boolean = true> {
  submitButtonText?:
    | T
    | {
        en?: T;
        es?: T;
      };
  amountLabel?:
    | T
    | {
        en?: T;
        es?: T;
      };
  amountPlaceholder?:
    | T
    | {
        en?: T;
        es?: T;
      };
  amountValidationError?:
    | T
    | {
        en?: T;
        es?: T;
      };
  itemName?:
    | T
    | {
        en?: T;
        es?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MembershipDuesForm_select".
 */
export interface MembershipDuesFormSelect<T extends boolean = true> {
  submitButtonText?:
    | T
    | {
        en?: T;
        es?: T;
      };
  priceLabel?:
    | T
    | {
        en?: T;
        es?: T;
      };
  itemName?:
    | T
    | {
        en?: T;
        es?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "OrderSummary_select".
 */
export interface OrderSummarySelect<T extends boolean = true> {
  heading?:
    | T
    | {
        en?: T;
        es?: T;
      };
  paidStatus?:
    | T
    | {
        en?: T;
        es?: T;
      };
  unpaidStatus?:
    | T
    | {
        en?: T;
        es?: T;
      };
  totalPaidLabel?:
    | T
    | {
        en?: T;
        es?: T;
      };
  loadingText?:
    | T
    | {
        en?: T;
        es?: T;
      };
  orderNotFoundText?:
    | T
    | {
        en?: T;
        es?: T;
      };
  returnButtonText?:
    | T
    | {
        en?: T;
        es?: T;
      };
  retryButtonText?:
    | T
    | {
        en?: T;
        es?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Align_select".
 */
export interface AlignSelect<T extends boolean = true> {
  align?: T;
  blocks?:
    | T
    | {
        eventCardGrid?: T | EventCardGridSelect<T>;
        heading?: T | HeadingSelect<T>;
        hero?:
          | T
          | {
              heading?:
                | T
                | {
                    en?: T;
                    es?: T;
                  };
              subheading?:
                | T
                | {
                    en?: T;
                    es?: T;
                  };
              backgroundMedia?: T;
              actions?:
                | T
                | {
                    action?: T | ActionSelect<T>;
                  };
              id?: T;
              blockName?: T;
            };
        action?: T | ActionSelect<T>;
        paragraph?: T | ParagraphSelect<T>;
        media?: T | MediaBlockSelect<T>;
        membershipStatusForm?: T | MembershipStatusFormSelect<T>;
        subscriptionForm?: T | SubscriptionFormSelect<T>;
        donationForm?: T | DonationFormSelect<T>;
        membershipDuesForm?: T | MembershipDuesFormSelect<T>;
        orderSummary?: T | OrderSummarySelect<T>;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Accordion_select".
 */
export interface AccordionSelect<T extends boolean = true> {
  items?:
    | T
    | {
        title?:
          | T
          | {
              en?: T;
              es?: T;
            };
        content?:
          | T
          | {
              eventCardGrid?: T | EventCardGridSelect<T>;
              heading?: T | HeadingSelect<T>;
              hero?:
                | T
                | {
                    heading?:
                      | T
                      | {
                          en?: T;
                          es?: T;
                        };
                    subheading?:
                      | T
                      | {
                          en?: T;
                          es?: T;
                        };
                    backgroundMedia?: T;
                    actions?:
                      | T
                      | {
                          action?: T | ActionSelect<T>;
                        };
                    id?: T;
                    blockName?: T;
                  };
              action?: T | ActionSelect<T>;
              paragraph?: T | ParagraphSelect<T>;
              media?: T | MediaBlockSelect<T>;
              membershipStatusForm?: T | MembershipStatusFormSelect<T>;
              subscriptionForm?: T | SubscriptionFormSelect<T>;
              donationForm?: T | DonationFormSelect<T>;
              membershipDuesForm?: T | MembershipDuesFormSelect<T>;
              orderSummary?: T | OrderSummarySelect<T>;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  title?: T;
  media?:
    | T
    | {
        en?: T;
        es?: T;
      };
  altText?:
    | T
    | {
        en?: T;
        es?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaFiles_select".
 */
export interface MediaFilesSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  slug?: T;
  titleText?: T;
  title?:
    | T
    | {
        en?: T;
        es?: T;
      };
  showInNav?: T;
  navigationOptions?:
    | T
    | {
        navOrder?: T;
        navLabel?:
          | T
          | {
              en?: T;
              es?: T;
            };
      };
  blocks?:
    | T
    | {
        eventCardGrid?: T | EventCardGridSelect<T>;
        heading?: T | HeadingSelect<T>;
        hero?:
          | T
          | {
              heading?:
                | T
                | {
                    en?: T;
                    es?: T;
                  };
              subheading?:
                | T
                | {
                    en?: T;
                    es?: T;
                  };
              backgroundMedia?: T;
              actions?:
                | T
                | {
                    action?: T | ActionSelect<T>;
                  };
              id?: T;
              blockName?: T;
            };
        action?: T | ActionSelect<T>;
        paragraph?: T | ParagraphSelect<T>;
        media?: T | MediaBlockSelect<T>;
        membershipStatusForm?: T | MembershipStatusFormSelect<T>;
        subscriptionForm?: T | SubscriptionFormSelect<T>;
        donationForm?: T | DonationFormSelect<T>;
        membershipDuesForm?: T | MembershipDuesFormSelect<T>;
        orderSummary?: T | OrderSummarySelect<T>;
        twoColumns?:
          | T
          | {
              columnRatio?: T;
              leftColumn?:
                | T
                | {
                    eventCardGrid?: T | EventCardGridSelect<T>;
                    heading?: T | HeadingSelect<T>;
                    hero?:
                      | T
                      | {
                          heading?:
                            | T
                            | {
                                en?: T;
                                es?: T;
                              };
                          subheading?:
                            | T
                            | {
                                en?: T;
                                es?: T;
                              };
                          backgroundMedia?: T;
                          actions?:
                            | T
                            | {
                                action?: T | ActionSelect<T>;
                              };
                          id?: T;
                          blockName?: T;
                        };
                    action?: T | ActionSelect<T>;
                    paragraph?: T | ParagraphSelect<T>;
                    media?: T | MediaBlockSelect<T>;
                    membershipStatusForm?: T | MembershipStatusFormSelect<T>;
                    subscriptionForm?: T | SubscriptionFormSelect<T>;
                    donationForm?: T | DonationFormSelect<T>;
                    membershipDuesForm?: T | MembershipDuesFormSelect<T>;
                    orderSummary?: T | OrderSummarySelect<T>;
                    align?: T | AlignSelect<T>;
                  };
              rightColumn?:
                | T
                | {
                    eventCardGrid?: T | EventCardGridSelect<T>;
                    heading?: T | HeadingSelect<T>;
                    hero?:
                      | T
                      | {
                          heading?:
                            | T
                            | {
                                en?: T;
                                es?: T;
                              };
                          subheading?:
                            | T
                            | {
                                en?: T;
                                es?: T;
                              };
                          backgroundMedia?: T;
                          actions?:
                            | T
                            | {
                                action?: T | ActionSelect<T>;
                              };
                          id?: T;
                          blockName?: T;
                        };
                    action?: T | ActionSelect<T>;
                    paragraph?: T | ParagraphSelect<T>;
                    media?: T | MediaBlockSelect<T>;
                    membershipStatusForm?: T | MembershipStatusFormSelect<T>;
                    subscriptionForm?: T | SubscriptionFormSelect<T>;
                    donationForm?: T | DonationFormSelect<T>;
                    membershipDuesForm?: T | MembershipDuesFormSelect<T>;
                    orderSummary?: T | OrderSummarySelect<T>;
                    align?: T | AlignSelect<T>;
                  };
              id?: T;
              blockName?: T;
            };
        align?: T | AlignSelect<T>;
        accordion?: T | AccordionSelect<T>;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: number;
  slogan?: {
    en?: string | null;
    es?: string | null;
  };
  linkGroups?:
    | {
        /**
         * Heading for link group
         */
        groupName: {
          en: string;
          es?: string | null;
        };
        links?:
          | {
              /**
               * /example or https://example.com
               */
              url: string;
              label: {
                en: string;
                es?: string | null;
              };
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  socialLinks?:
    | {
        /**
         * https://facebook.com/handle
         */
        url: string;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "general".
 */
export interface General {
  id: number;
  baseTitle: {
    en: string;
    es?: string | null;
  };
  logo: number | Media;
  icon?: (number | null) | Media;
  membershipPrice: number;
  eventLabels?: {
    dateLabel?: {
      en?: string | null;
      es?: string | null;
    };
    timeLabel?: {
      en?: string | null;
      es?: string | null;
    };
    locationLabel?: {
      en?: string | null;
      es?: string | null;
    };
  };
  name?: {
    nameLabel?: {
      en?: string | null;
      es?: string | null;
    };
    namePlaceholder?: {
      en?: string | null;
      es?: string | null;
    };
    nameValidationError?: {
      en?: string | null;
      es?: string | null;
    };
  };
  email?: {
    emailLabel?: {
      en?: string | null;
      es?: string | null;
    };
    emailPlaceholder?: {
      en?: string | null;
      es?: string | null;
    };
    emailValidationError?: {
      en?: string | null;
      es?: string | null;
    };
  };
  phone?: {
    phoneLabel?: {
      en?: string | null;
      es?: string | null;
    };
    phonePlaceholder?: {
      en?: string | null;
      es?: string | null;
    };
    phoneValidationError?: {
      en?: string | null;
      es?: string | null;
    };
  };
  address?: {
    addressLabel?: {
      en?: string | null;
      es?: string | null;
    };
    addressPlaceholder?: {
      en?: string | null;
      es?: string | null;
    };
    addressValidationError?: {
      en?: string | null;
      es?: string | null;
    };
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  slogan?:
    | T
    | {
        en?: T;
        es?: T;
      };
  linkGroups?:
    | T
    | {
        groupName?:
          | T
          | {
              en?: T;
              es?: T;
            };
        links?:
          | T
          | {
              url?: T;
              label?:
                | T
                | {
                    en?: T;
                    es?: T;
                  };
              id?: T;
            };
        id?: T;
      };
  socialLinks?:
    | T
    | {
        url?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "general_select".
 */
export interface GeneralSelect<T extends boolean = true> {
  baseTitle?:
    | T
    | {
        en?: T;
        es?: T;
      };
  logo?: T;
  icon?: T;
  membershipPrice?: T;
  eventLabels?:
    | T
    | {
        dateLabel?:
          | T
          | {
              en?: T;
              es?: T;
            };
        timeLabel?:
          | T
          | {
              en?: T;
              es?: T;
            };
        locationLabel?:
          | T
          | {
              en?: T;
              es?: T;
            };
      };
  name?:
    | T
    | {
        nameLabel?:
          | T
          | {
              en?: T;
              es?: T;
            };
        namePlaceholder?:
          | T
          | {
              en?: T;
              es?: T;
            };
        nameValidationError?:
          | T
          | {
              en?: T;
              es?: T;
            };
      };
  email?:
    | T
    | {
        emailLabel?:
          | T
          | {
              en?: T;
              es?: T;
            };
        emailPlaceholder?:
          | T
          | {
              en?: T;
              es?: T;
            };
        emailValidationError?:
          | T
          | {
              en?: T;
              es?: T;
            };
      };
  phone?:
    | T
    | {
        phoneLabel?:
          | T
          | {
              en?: T;
              es?: T;
            };
        phonePlaceholder?:
          | T
          | {
              en?: T;
              es?: T;
            };
        phoneValidationError?:
          | T
          | {
              en?: T;
              es?: T;
            };
      };
  address?:
    | T
    | {
        addressLabel?:
          | T
          | {
              en?: T;
              es?: T;
            };
        addressPlaceholder?:
          | T
          | {
              en?: T;
              es?: T;
            };
        addressValidationError?:
          | T
          | {
              en?: T;
              es?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}
