/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    admins: AdminAuthOperations;
  };
  blocks: {
    hero: Hero;
    section: Section;
  };
  collections: {
    admins: Admin;
    pages: Page;
    events: Event;
    media: Media;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    admins: AdminsSelect<false> | AdminsSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    events: EventsSelect<false> | EventsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    footer: Footer;
  };
  globalsSelect: {
    footer: FooterSelect<false> | FooterSelect<true>;
  };
  locale: null;
  user: Admin & {
    collection: 'admins';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface AdminAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "hero".
 */
export interface Hero {
  heading: {
    en: string;
    es?: string | null;
  };
  subheading?: {
    en?: string | null;
    es?: string | null;
  };
  backgroundMedia?: {
    en?: (number | null) | Media;
    es?: (number | null) | Media;
    altText?: {
      en?: string | null;
      es?: string | null;
    };
  };
  ctas?:
    | {
        label: {
          en: string;
          es?: string | null;
        };
        url: string;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'hero';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  title?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "section".
 */
export interface Section {
  heading: {
    en: string;
    es?: string | null;
  };
  blocks?: (Paragraph | LinkButton)[] | null;
  media?: {
    en?: (number | null) | Media;
    es?: (number | null) | Media;
    altText?: {
      en?: string | null;
      es?: string | null;
    };
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'section';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Paragraph".
 */
export interface Paragraph {
  text: {
    en: string;
    es?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'paragraph';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LinkButton".
 */
export interface LinkButton {
  label: {
    en: string;
    es?: string | null;
  };
  url: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'linkButton';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "admins".
 */
export interface Admin {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  /**
   * Part of the URL which routes to this page
   */
  slug: string;
  /**
   * Used to identify this page in a list of pages
   */
  name: string;
  /**
   * Shows up in the browser tab and search results
   */
  pageTitle?: {
    en?: string | null;
    es?: string | null;
  };
  showInNav?: boolean | null;
  /**
   * Pages with lower values will be listed first
   */
  navigationOptions?: {
    navOrder?: number | null;
    /**
     * Navigation link label
     */
    navLabel: {
      en: string;
      es?: string | null;
    };
  };
  blocks?:
    | (
        | {
            heading: {
              en: string;
              es?: string | null;
            };
            subheading?: {
              en?: string | null;
              es?: string | null;
            };
            backgroundMedia?: {
              en?: (number | null) | Media;
              es?: (number | null) | Media;
              altText?: {
                en?: string | null;
                es?: string | null;
              };
            };
            ctas?:
              | {
                  label: {
                    en: string;
                    es?: string | null;
                  };
                  url: string;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'hero';
          }
        | EventCardGrid
        | {
            heading: {
              en: string;
              es?: string | null;
            };
            blocks?: (Paragraph | LinkButton)[] | null;
            media?: {
              en?: (number | null) | Media;
              es?: (number | null) | Media;
              altText?: {
                en?: string | null;
                es?: string | null;
              };
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'section';
          }
        | Paragraph
        | LinkButton
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "EventCardGrid".
 */
export interface EventCardGrid {
  heading: {
    en: string;
    es?: string | null;
  };
  rowsToShow: number;
  showMoreLabel?: {
    en?: string | null;
    es?: string | null;
  };
  link?: {
    href?: string | null;
    label?: {
      en?: string | null;
      es?: string | null;
    };
  };
  filter: 'upcoming' | 'past';
  id?: string | null;
  blockName?: string | null;
  blockType: 'eventCardGrid';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events".
 */
export interface Event {
  id: number;
  /**
   * Part of the URL which routes to this event
   */
  slug: string;
  /**
   * Used to identify this page in a list of events
   */
  name: string;
  /**
   * Shows up in the browser tab and search results
   */
  pageTitle: {
    en: string;
    es?: string | null;
  };
  dateTime: string;
  location: {
    en: string;
    es?: string | null;
  };
  media: {
    en: number | Media;
    es?: (number | null) | Media;
    altText: {
      en: string;
      es?: string | null;
    };
  };
  blocks?: (Paragraph | LinkButton)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'admins';
        value: number | Admin;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'events';
        value: number | Event;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'admins';
    value: number | Admin;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'admins';
    value: number | Admin;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "admins_select".
 */
export interface AdminsSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  slug?: T;
  name?: T;
  pageTitle?:
    | T
    | {
        en?: T;
        es?: T;
      };
  showInNav?: T;
  navigationOptions?:
    | T
    | {
        navOrder?: T;
        navLabel?:
          | T
          | {
              en?: T;
              es?: T;
            };
      };
  blocks?:
    | T
    | {
        hero?:
          | T
          | {
              heading?:
                | T
                | {
                    en?: T;
                    es?: T;
                  };
              subheading?:
                | T
                | {
                    en?: T;
                    es?: T;
                  };
              backgroundMedia?:
                | T
                | {
                    en?: T;
                    es?: T;
                    altText?:
                      | T
                      | {
                          en?: T;
                          es?: T;
                        };
                  };
              ctas?:
                | T
                | {
                    label?:
                      | T
                      | {
                          en?: T;
                          es?: T;
                        };
                    url?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        eventCardGrid?: T | EventCardGridSelect<T>;
        section?:
          | T
          | {
              heading?:
                | T
                | {
                    en?: T;
                    es?: T;
                  };
              blocks?:
                | T
                | {
                    paragraph?: T | ParagraphSelect<T>;
                    linkButton?: T | LinkButtonSelect<T>;
                  };
              media?:
                | T
                | {
                    en?: T;
                    es?: T;
                    altText?:
                      | T
                      | {
                          en?: T;
                          es?: T;
                        };
                  };
              id?: T;
              blockName?: T;
            };
        paragraph?: T | ParagraphSelect<T>;
        linkButton?: T | LinkButtonSelect<T>;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "EventCardGrid_select".
 */
export interface EventCardGridSelect<T extends boolean = true> {
  heading?:
    | T
    | {
        en?: T;
        es?: T;
      };
  rowsToShow?: T;
  showMoreLabel?:
    | T
    | {
        en?: T;
        es?: T;
      };
  link?:
    | T
    | {
        href?: T;
        label?:
          | T
          | {
              en?: T;
              es?: T;
            };
      };
  filter?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Paragraph_select".
 */
export interface ParagraphSelect<T extends boolean = true> {
  text?:
    | T
    | {
        en?: T;
        es?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LinkButton_select".
 */
export interface LinkButtonSelect<T extends boolean = true> {
  label?:
    | T
    | {
        en?: T;
        es?: T;
      };
  url?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events_select".
 */
export interface EventsSelect<T extends boolean = true> {
  slug?: T;
  name?: T;
  pageTitle?:
    | T
    | {
        en?: T;
        es?: T;
      };
  dateTime?: T;
  location?:
    | T
    | {
        en?: T;
        es?: T;
      };
  media?:
    | T
    | {
        en?: T;
        es?: T;
        altText?:
          | T
          | {
              en?: T;
              es?: T;
            };
      };
  blocks?:
    | T
    | {
        paragraph?: T | ParagraphSelect<T>;
        linkButton?: T | LinkButtonSelect<T>;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  title?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: number;
  /**
   * Shows below the logo
   */
  description?: {
    en?: string | null;
    es?: string | null;
  };
  linkGroups?:
    | {
        /**
         * Heading for link group
         */
        groupName: {
          en: string;
          es?: string | null;
        };
        links?:
          | {
              href: string;
              /**
               * Clickable link text
               */
              label: {
                en: string;
                es?: string | null;
              };
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  socialLinks?: {
    facebook?: string | null;
    instagram?: string | null;
    x?: string | null;
    youtube?: string | null;
    bluesky?: string | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  description?:
    | T
    | {
        en?: T;
        es?: T;
      };
  linkGroups?:
    | T
    | {
        groupName?:
          | T
          | {
              en?: T;
              es?: T;
            };
        links?:
          | T
          | {
              href?: T;
              label?:
                | T
                | {
                    en?: T;
                    es?: T;
                  };
              id?: T;
            };
        id?: T;
      };
  socialLinks?:
    | T
    | {
        facebook?: T;
        instagram?: T;
        x?: T;
        youtube?: T;
        bluesky?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}
